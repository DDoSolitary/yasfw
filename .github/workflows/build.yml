on: push
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        rust_triplet: [x86_64-pc-windows-msvc, i686-pc-windows-msvc]
        include:
          - rust_triplet: x86_64-pc-windows-msvc
            vcpkg_triplet: x64-windows-static
            arch: x86_64
            abi: msvc
          - rust_triplet: i686-pc-windows-msvc
            vcpkg_triplet: x86-windows-static
            arch: i686
            abi: msvc
          - rust_triplet: x86_64-pc-windows-gnu
            msystem: MINGW64
            arch: x86_64
            abi: mingw
          - rust_triplet: i686-pc-windows-gnu
            msystem: MINGW32
            arch: i686
            abi: mingw
    runs-on: windows-latest
    env:
      LIBSSH_STATIC: 1
    steps:
      - if: ${{ matrix.abi == 'msvc' }}
        env:
          VCPKG_DEFAULT_TRIPLET: ${{ matrix.vcpkg_triplet }}
        run: |
          cd $Env:VCPKG_INSTALLATION_ROOT
          cmd /c "git pull 2>&1"
          .\bootstrap-vcpkg.bat
          vcpkg integrate install
          vcpkg install mbedtls[pthreads] zlib
      - if: ${{ matrix.abi == 'mingw' }}
        env:
          MSYSTEM: ${{ matrix.msystem }}
        run: |
          $ErrorActionPreference = "Continue"
          C:\msys64\usr\bin\bash.exe -l -c "pacman -Syu --noconfirm --noprogressbar"
          C:\msys64\usr\bin\bash.exe -l -c 'pacman -Syu --needed --noconfirm --noprogressbar base-devel $MINGW_PACKAGE_PREFIX-{toolchain,openssl,zlib}'
      - uses: actions/checkout@master
      - run: |
          $Env:DOKAN_DLL_OUTPUT_PATH = $PWD
          if ("${{ matrix.abi }}" -eq "msvc") {
              $Env:RUSTFLAGS = "-Ctarget-feature=+crt-static"
              $Env:VCPKG_ROOT = $Env:VCPKG_INSTALLATION_ROOT
          } elseif ("${{ matrix.abi }}" -eq "mingw") {
              $Env:PATH = "C:\msys64\$('${{ matrix.msystem }}'.ToLower())\bin;$Env:PATH"
          }

          cmd /c "rustup toolchain install stable-${{ matrix.rust_triplet }} 2>&1"
          cmd /c "git fetch --tags --unshallow 2>&1"
          cmd /c "git submodule update --init 2>&1"
          cmd /c "cargo +stable-${{ matrix.rust_triplet }} build --release --target ${{ matrix.rust_triplet }} 2>&1"
          if ($LASTEXITCODE -ne 0) { exit 1 }

          7z a release.zip `
              .\LICENSE `
              .\dokan1.dll `
              .\target\${{ matrix.rust_triplet }}\release\yasfw.exe
      - if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -Force ~\.ssh
          [IO.File]::WriteAllBytes( `
              "$Env:USERPROFILE\.ssh\id_ed25519", `
              [Convert]::FromBase64String("${{ secrets.DEPLOYKEY }}"))
          cmd /c 'ssh-keyscan web.sourceforge.net > "%USERPROFILE%\.ssh\known_hosts" 2>nul'
          cmd /c "scp release.zip ddosolitary@web.sourceforge.net:/home/project-web/ddosolitary-builds/htdocs/yasfw/yasfw-$(git describe --tags)-${{ matrix.arch }}-${{ matrix.abi }}.zip 2>&1"
          if ($LASTEXITCODE -ne 0) { exit 1 }
